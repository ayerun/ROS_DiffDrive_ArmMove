#!/usr/bin/env python3

import sys
import rospy
import moveit_commander
import moveit_msgs.msg
from geometry_msgs.msg import PoseStamped, Point
from std_srvs.srv import Empty, EmptyResponse
from arm_move.srv import reset, step
from math import pi

class Mover:
    '''
    stuff
    '''
    def __init__(self):
        '''
        stuff
        '''

        #initalize moveit_commander and node
        moveit_commander.roscpp_initialize(sys.argv)
        rospy.init_node('mover')

        #initialize robot commander
        self.robot = moveit_commander.RobotCommander()

        #initialize scene object
        self.scene = moveit_commander.PlanningSceneInterface()

        #initialize move group
        self.move_group = moveit_commander.MoveGroupCommander('interbotix_arm')

        #initialize services
        self.Reset = rospy.Service('reset',reset,self.reset_callback)

        #add table to scene
        rospy.sleep(1)
        self.add_table()
        # self.reset_callback()

    def add_table(self):
        table = PoseStamped()
        table.header.frame_id = 'world'
        table.pose.position = Point(x=0.3,y=0,z=-0.05)
        table.pose.orientation.w = 1
        print(table)
        self.scene.add_box('table',table,(1,0.6,0.1))
    
    def reset_callback(self,req):
        box_stamped = PoseStamped()
        box_stamped.header.frame_id = 'world'
        box_stamped.pose = req.box_pose
        # # box.pose.position = Point(x=0.2,y=0,z=0)
        # # box.pose.orientation.w = 1
        self.scene.add_box('realsense',box_stamped,(0.09,0.14, 0.05))
        return []


def main():
    mov = Mover()
    rospy.spin()

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass
