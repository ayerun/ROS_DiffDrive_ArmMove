#!/usr/bin/env python3

import sys
import rospy
import moveit_commander
from moveit_msgs.msg import MoveItErrorCodes
from geometry_msgs.msg import PoseStamped, Point, Pose
from std_srvs.srv import Empty, EmptyResponse
from arm_move.srv import reset, step, follow
from math import pi

class Mover:
    '''
    Services:   reset - adds/moves realsense box, moves arm to home position, and resets waypoints if user desires
                step - moves are to user define position, if trajectory is executed waypoint is added to parameter server
                follow - follow all waypoints in parameter server
    Parameters: xlist - x position of waypoints
                ylist - y position of waypoints
                zlist - z position of waypoints
                griplist - true if gripper is closed, false if gripper is open 
    '''
    def __init__(self):
        '''
        Constructor of mover class
        initializes services, parameters, and moveit_commander objects
        '''

        #initalize moveit_commander and node
        moveit_commander.roscpp_initialize(sys.argv)
        rospy.init_node('mover')

        #import waypoints
        self.xlist = rospy.get_param('mover/x')
        self.ylist = rospy.get_param('mover/y')
        self.zlist = rospy.get_param('mover/z')
        self.griplist = rospy.get_param('mover/grip')

        #initialize robot commander
        self.robot = moveit_commander.RobotCommander()

        #initialize scene object
        self.scene = moveit_commander.PlanningSceneInterface()

        #initialize move groups
        self.move_group = moveit_commander.MoveGroupCommander('interbotix_arm')
        self.move_group.set_goal_tolerance(0.005)
        self.move_group.set_max_velocity_scaling_factor(1.0)
        self.move_gripper = moveit_commander.MoveGroupCommander('interbotix_gripper')
        self.move_gripper.set_max_velocity_scaling_factor(1.0)

        #initialize services
        self.Reset = rospy.Service('reset',reset,self.reset_callback)
        self.Step = rospy.Service('step',step,self.step_callback)
        self.Follow = rospy.Service('follow',follow,self.follow_callback)

        #add table to scene
        rospy.sleep(2)
        self.add_table()

    def add_table(self):
        '''
        adds a table to the motion planning scene
        '''
        table = PoseStamped()
        table.header.frame_id = 'world'
        table.pose.position = Point(x=0.3,y=0,z=-0.05)
        table.pose.orientation.w = 1
        self.scene.add_box('table',table,(1,0.6,0.1))
    
    def reset_callback(self,req):
        '''
        callback function for reset service
        moves arm to home position
        creates a collision object at the inputted position
        moves arm to home configuration
        Arg:
            req.box_pose (geometry_msgs/Pose): desired pose for collision object
            req.clear_waypoints (bool): clears waypoints in parameter server if true
        '''

        #Delete collision object if already in scene
        try:
            self.scene.remove_world_object('realsense')
        except:
            pass

        box_stamped = PoseStamped()
        box_stamped.header.frame_id = 'world'
        box_stamped.pose = req.box_pose

        #Create collision object
        self.scene.add_box('realsense',box_stamped,(0.09,0.14, 0.05))

        #move arm to home position
        self.move_group.set_named_target('Home')
        self.move_group.go()
        self.move_gripper.set_named_target('Open')
        self.move_gripper.go()

        #clear waypoints
        if req.clear_waypoints:
            self.xlist=[]
            self.ylist=[]
            self.zlist=[]
            self.griplist=[]
            rospy.set_param('mover/x', self.xlist)
            rospy.set_param('mover/y', self.ylist)
            rospy.set_param('mover/z', self.zlist)
            rospy.set_param('mover/grip', self.griplist)

        return []

    def step_callback(self,req):
        '''
        callback for step service
        plans and executes trajectory to user specified position
        opens/closes gripper based on user's specification
        adds waypoint to parameter server if plan is successful
        Args:
            req.position (geometry_msgs/Point): desired end effector position
            req.gripper (bool): true = close gripper | false = open gripper
        Returns:
            plan[3] (moveit_msgs/MoveItErrorCodes): error code from planning trajectory
        '''
        #set goal state
        xyz = []
        xyz.append(req.position.x)
        xyz.append(req.position.y)
        xyz.append(req.position.z)
        self.move_group.set_position_target(xyz)

        #plan trajectory
        plan = self.move_group.plan()

        #execute trajectory plan
        self.move_group.execute(plan_msg=plan[1],wait=True)
        self.move_group.stop()

        #Open/Close Gripper
        if req.gripper:
            self.move_gripper.set_named_target('Closed')
            self.move_gripper.go()
        else:
            self.move_gripper.set_named_target('Open')
            self.move_gripper.go()
        
        #waypoint management
        if plan[3].val == 1:
            self.xlist.append(xyz[0])
            self.ylist.append(xyz[1])
            self.zlist.append(xyz[2])
            self.griplist.append(req.gripper)
            rospy.set_param('mover/x', self.xlist)
            rospy.set_param('mover/y', self.ylist)
            rospy.set_param('mover/z', self.zlist)
            rospy.set_param('mover/grip', self.griplist)

        #return error codes
        return plan[3]
    
    def follow_callback(self,req):
        '''
        callback for follow service
        arms plans and executes paths to all waypoints in parameter server
        cycle repeats if user specifies
        Args:
            req.repeat (bool): if true cycle repeats continuously
        '''
        self.follow_waypoints()
        while req.repeat:
            self.follow_waypoints()

        return []
    
    def follow_waypoints(self):
        '''
        arms plans and executes paths to all waypoints in parameter server
        '''
        for i in range(len(self.xlist)):
            #set goal state
            xyz = []
            xyz.append(self.xlist[i])
            xyz.append(self.ylist[i])
            xyz.append(self.zlist[i])
            self.move_group.set_position_target(xyz)

            #plan and execute trajectory
            self.move_group.go(wait=True)

            #Open/Close Gripper
            if self.griplist[i]:
                self.move_gripper.set_named_target('Closed')
                self.move_gripper.go()
            else:
                self.move_gripper.set_named_target('Open')
                self.move_gripper.go()



def main():
    mov = Mover()
    rospy.spin()

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass
