#!/usr/bin/env python3

import rospy
import time
from geometry_msgs.msg import Twist, Vector3
from std_srvs.srv import Empty
from math import pi

class flip:
    '''
    Contains function to flip robot
    Services: unpause_physics_client - unpauses Gazebo simulation
    Publishes:  geometry_msgs/Twist message to cmd_vel
    '''
    def __init__(self):
        '''
        constructor for flip class
        initializes publisher
        '''

        #initialize publisher
        self.pub = rospy.Publisher('cmd_vel',Twist,queue_size=10)
        self.prate = rospy.Rate(300)

        #initialize services
        rospy.wait_for_service('/gazebo/unpause_physics')
        self.unpause_physics_client = rospy.ServiceProxy('/gazebo/unpause_physics',Empty)

    def create_twist(self,xdot,omega):
        '''
        converts velocity and angular velocity to geometry_msgs/Twist message
        args:       xdot - velocity
                    omega - angular velocity
        reuturns:   Twist message
        '''
        return Twist(linear = Vector3(x = xdot, y = 0, z = 0),
                    angular = Vector3(x = 0, y = 0, z = omega))

    def flip(self):
        '''
        Moves robot along straigh line trajectory
        Robot stops, flips, and reverses direction every 2 seconds
        '''
        now = rospy.get_time()
        while rospy.get_time() < now+2:
            self.pub.publish(self.create_twist(1,0))
            self.prate.sleep()
        now = rospy.get_time()
        while rospy.get_time() < now+2:
            self.pub.publish(self.create_twist(0,0))
            self.prate.sleep()
        now = rospy.get_time()
        while rospy.get_time() < now+2:
            self.pub.publish(self.create_twist(-1,0))
            self.prate.sleep()
        self.pub.publish(self.create_twist(0,0))
        time.sleep(1)


        


def main():
    '''
    main function
    creates flip object
    unpauses Gazebo
    uses flip object to continuously flip robot
    '''

    rospy.init_node('flip')
    f = flip()
    f.unpause_physics_client()
    time.sleep(2)
    while not rospy.is_shutdown():
        f.flip()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass